generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  transactions      Transaction[]
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  transactions Transaction[]
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model Transaction {
  id                   Int                 @id @default(autoincrement())
  amount               Int
  timestamp            DateTime           @default(now())
  description          String?
  type                 TransactionType
  status               TransactionStatus
  userId               Int
  user                 User               @relation(fields: [userId], references: [id])

  // Optional relations to one of the underlying transaction sources
  onRampTransactionId  Int?               
  onRampTransaction    OnRampTransaction? @relation(fields: [onRampTransactionId], references: [id])

  p2pTransferId        Int?
  p2pTransfer          p2pTransfer?       @relation(fields: [p2pTransferId], references: [id])
}
enum TransactionType {
  OnRamp
  P2PTransfer
}

enum TransactionStatus {
  Pending
  Completed
  Failed
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
